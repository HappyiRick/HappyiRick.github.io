[ { "title": "《原则》", "url": "/posts/priciplesReadNote/", "categories": "读书笔记", "tags": "管理, 读书笔记", "date": "2022-03-27 19:55:00 +0800", "snippet": " 很难将原则定义为一般的案例教学书，不仅因为它的作者是大名鼎鼎的桥水基金创始人，同时也因为其中的很多建设性意见和建议实在是非常地接地气，例如要极度求真、要保持心态极度开放，这都是对生活和工作体验到更高层次后发出的由衷的感慨，未能早点读完这本书，真的是稍微有点遗憾。 书里一共讲到三个部分，首先讲了作者自己的一些历史，然后重点谈到了生活和工作中的原则，着实让人受益匪浅。本文重点谈一谈个人对生活和工作原则的理解。生活原则在生活原则中，作者主要讲到了人的处事原则，做事的方法，心态，观点，以及提高效率，个人认为，这也是我们应该遵循的处理生活问题的几个关键流程。首先强调了要直面现实中的问题，当问题来临的时候，我们不能采取躲避或者拖延的方式来幻想解决它，而是要从实际出发，做好观察，分析主客观条件，整理资源，对自己所处的环境做出清晰的判断。然后在认清客观条件的基础上，我们要掌握具体地做事方法，长期的事情长期做，规划好迭代的周期，短期的事情分阶段做，确定好交付的结点，坚决执行，在实践中不断推进客观事物的发展。同时，在做事过程中，我们会时刻面临意料之外的情况，这就要求我们要掌握应对突发情况的能力，最坏的情况是，我们在观察过程中有所缺漏，导致我们对于客观条件的掌握并不充分和正确，这意味着我们执行工作必然有所缺陷，是否有勇气去承认和分析这种困境，需要我们的头脑极度开放，能够去承认和接受任何可能的极端情况。其次，在生活的各个场景中，我们不免要与形形色色的人打交道，承认人们之间的差异，在我们做事的过程中异常重要。最后，无论在哪个场景下，我们时时刻刻都要面临大量的决策，如何筛选出建设性的决策场景并将我们的主要精力放在这些关键决策上，是非常重要的。工作原则在工作原则中，主要就是三个要素，环境、人、系统，其中，环境将决定人们做事的外因，而人永远是做事的第一要素，系统则能让两者可持续的交互，不断地去修正环境和发现所需要的人才。环境作为土壤，决定着其上能生长出何种质量的果实，好的环境能够孕育出丰盈饱满的珍馐，而坏的土壤往往让好的种子也只能生长成为营养匮乏、羸弱无味的残次品。在书中，推崇公司推行极度求真和极度透明的公司文化，去让每一个人都能以一种非常职业的态度去畅谈自己发现的问题，而建立这样一种文化环境之后，后续的具体做法则包括做有意义的实践、求同存异、允许犯错但不能罔顾教训、尊重客观、超越分歧等等。人永远是是执行的最重要的要素，书中对人这一要素的重视甚至超越了事情本身，这一点我是非常赞同的，许是成长环境多变，接触的形形色色的人非常多，学历专业工作爱好各不相同，然而总有那么一个群体中的人，他们不在于自身的标签是什么，当与他们合作的时候，你总是能够放心地将后背交给他们，用口语来形容就是靠谱，根据书中所强调的，在人这一要素上，我们所应奉行的宗旨就是：找能力过关的靠谱的人，培养他们，并给他们提供做事的平台。最后则是要建立我们的系统，运动是绝对的，任何环境和人都会在发展的过程中产生变化，从而偏离既定的轨道，这种变化往往被称为熵增，指代事物的混乱程度，一旦熵到达了某种量级，则会推动原有的系统产生颠覆性的变化，依我之见，所有的管理工作，都是引导这种熵增和变化去走向正确的轨道，从而推动事情向我们预期的方向平稳发展。书中为我们提供了一系列的具体措施，包括不容忍发现的问题、探究问题的根源、合理地解决问题、制定计划并保证按照计划执行、形成指导原则和操作手册、在思想上重视管理工作。总结从我个人看来，这本原则不仅是讲述了生活和工作中的一些处理事情的方法，更是建立一种以合作共赢为基础的系统性的观点，观点讲究以人为核心，追求头脑开放，心态平和，尊重客观现实等特质，去完善作为人的个体，将自己的长期发展看作是一个可管理的系统，坦率面对自己，承认自己的不足，有效地建立起与自己心智的沟通体系，为自己的发展制定计划，并长期坚持，最终完善自我，达到自我成功的境界。真的非常推荐这本书，无论你在从事什么工作，我都推荐你读一读。" }, { "title": "Github+PicGo+jsDelivr创建稳定图床", "url": "/posts/pictureBed/", "categories": "日有寸进", "tags": "Blog, 图床", "date": "2022-03-17 19:55:00 +0800", "snippet": " 图床是用来存储图片资源用于blog或者其他应用的网络资源库，对于个人blog来说，稳定长期且经济适用的图床非常重要主要涉及三个服务 Github为我们提供稳定的站点 PicGo用来作为图床配置，管理图床图片 jsDelivr是开源的CDN服务，用来加速图片访问1.Github配置1.1 申请图床仓库1.2 申请Personal Token到 __Setting–Developer settings–Personal access tokens__申请新的token，申请完之后记得保存2.PicGo安装PicGo release 传送门前往PicGo的Github地址下载并安装PicGo3.PicGo配置JSDELIVR我的配置其中，指定存储路径之后需要带/以创建路径打开时间戳设置在图床上传时，可能会出现重名情况，因此打开时间戳重命名的话，能有效避免这一问题总结以上，即为构建blog稳定图床的全过程." }, { "title": "Clang-format结合Xcode File-template、Code Snippet探索iOS代码规范实践", "url": "/posts/codeFormat/", "categories": "iOS", "tags": "iOS, 代码规范", "date": "2022-03-09 19:55:00 +0800", "snippet": " 代码规范是每一个开发小组在实践中的一个痛点，如何让队伍中尽可能多的人遵循同一套代码风格，产出高质量的代码，同时能够尊重每位开发者的编程习惯，不增加冗余环节，是值得每个工程师思考的问题在本文中，将利用Clang-format工具结合Xcode自带文件模版、Code Snippet探索iOS代码规范实践Clang-format ClangFormat describes a set of tools that are built on top of LibFormat. It can support your workflow in a variety of ways including a standalone tool and editor integrations.Clang-format 是一个代码格式化工具，能够为C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C#提供格式化规则安装clang-format通过homebrew下载brew install clang-format查看是否安装成功clang-format --version添加clang-format服务在 启动台 » 其他 » 自动操作 中选择 快速操作脚本代码export PATH=/usr/local/bin:$PATHclang-format保存服务并命名，例如保存为 Xcode-clang-format （很重要,后面还要用）clang-format使用在当前用户根目录～ 放入 .clang-format 文件touch ~/.clang-format下载链接 .clang-format具体参数意义详见 clang-format参数详解添加clang-format快捷键系统设置 » 键盘 » 快捷键 » APP快捷键 » Xcode.app 添加服务 Xcode-clang-format （之前保存的服务名）设置快捷键 Control + I快去工程里试试吧参考资料 clang-format clang-format官方自定义参数介绍Xcode File-templateXcode的文件模板路径一般在下面这个目录/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates所有的模板文件即存在File Template/iOS/Source中复制 source 文件夹，重命名为 CustomTemplate ，即为自定义的文件模板分区其中，又分为 Swift 和 OC 以及带XIB文件的文件夹，其中的 .h 和 .m 文件即为模板文件以 OC 的 ViewController 为例新建 CustomTemplate 下的 ViewController 文件建立好的.m文件通过模板，即可实现代码分区和一部分固定方法的重写实现参考资料 Apple宏参数文档 Xcode模板和Code SnippetCode Snippet新建 Code Snippet通知、Observer、懒加载、创建单例、贝塞尔曲线等格式化代码，均可通过上述方式存储起来" }, { "title": "Github部署--开启写作之路 (下)", "url": "/posts/githubDeploy/", "categories": "日有寸进", "tags": "日有寸进, 写作工具", "date": "2022-03-03 18:55:00 +0800", "snippet": "在本文中，将使用Gitbook + Github pages搭建属于自己的Blog，终端环境为zsh，设备为Macbook. 上一篇中，我们讲了Gitbook的安装、构建及启动服务，这样只是完成了gitbook的本地化工作，如果我们想让更多人看到我们的电子书，就需要将其部署在公共服务器上了。对于个人博客来说，还有一条更方便的路径，便是利用Github提供的pages功能及公开仓库来完成网络电子书的部署。1.Github pages搭建1.1 建立github pages仓库仓库名称必须为 ${你的github名称}.github.io1.2 设置主页进入 ${你的github username}.github.io仓库，点击Settings &amp;gt; Pages » Theme chooser然后就可以选择一个jeklly提供的模板主题，同时，github会默认建立名为gh-pages 的部署分支，其即为我们个人主页静态资源的部署分支. 当然，也可以选择fork其他自定义主题的仓库.稍等两分钟之后，访问https:// ${你的github名称}.github.io 即可访问你的个人github主页.2.建立Gitbook博客仓库这部分无需赘言，即在github上建立一个存放gitbook内容的公共仓库，然后在本地gitbook目录中绑定该仓库，新建gh-pages分支用作静态资源部署分支，实现gitbook的版本管理和网络部署，其主要流程如下 新建github仓库 进入本地gitbook目录下, 并执行以下命令 git init git remote add origin xxx.git git checkout -b gh-pages 新建本地分支 git push --set-upstream origin gh-pages 绑定远端分支，若没有则新建 在该仓库github中进入Setting &amp;gt; Pages &amp;gt;Source , 选择gh-pages作为部署分支3.通过Github Actions实现自动部署Actions是Github提供的一款CI工具，可以很便利地在我们提交代码后进行一些脚本操作，对于gitbook来说，我们在写完文档之后，还需要进行生成目录、构建、将生成的静态网页提交到部署分支上，这些工作都可以通过脚本来自动化完成。以前主流方法是通过Travis来做，随着Actions的发布，基于github pages的博客自动部署都可以更加便利地使用它来完成。3.1 新建token首先从 Setting &amp;gt; Developer Settings&amp;gt;Personal access tokens生成用于仓库访问的token，仅选择repo读的权限即可 （记得保存，仅会出现一次）3.2 新建Actions脚本首先进入gitbook部署仓库Settings &amp;gt; Security &amp;gt; Actions 新建secret，命名为TOKEN, 值为第二步中的personal access token生成的字符串进入Actions, 新建脚本部署脚本代码如下：deploy.yml这样每次push之后，Actions上便会自动执行该脚本，失败则会给所填写的邮箱发送邮件提醒，整体来说还是非常高效的总结通过两篇文章阐述了利用Gitbook+Github pages搭建博客的过程，做一下记录，也希望能够帮到有需要的人 有些事情还是要试一试才知道，其实事情本身并没有那么难，只是我们一直在被自己对于未知的恐惧所支配参考链接github actions 简易入门及自动部署博客实践" }, { "title": "Gitbook配置--开启写作之路 (上)", "url": "/posts/gitbookConfig/", "categories": "日有寸进", "tags": "日有寸进, 写作工具", "date": "2022-02-28 19:55:00 +0800", "snippet": "在本文中，将使用Gitbook + Github pages搭建属于自己的Blog，终端环境为zsh，设备为Macbook.1.node.js 安装gitbook作为一个电子书写作框架，需要nodejs提供页面渲染支持，以及npm包管理工具来提供自定义插件进行使用。由于gitbook作者目前已经转向gitbook的商业化运作，因此gitbook目前公开的部署版本已经是几年前了，所以高版本的node部署起来会有一定的问题，建议如果不需要使用nodejs新特性的朋友，可以安装6.x版本node.js 6.x . 当然，如果需要跟随新特性的话，可以使用homebrew来进行安装，不过会存在一部分问题，我们可以一起来解决一下, 同时，有一部分插件随着nodejs版本的升高也无法使用，因此本文中homebrew选用的nodejs版本为node@12. brew search node brew install node@12下载完成之后，按照提示执行下列命令, 并使之生效即可. echo &#39;export PATH=&quot;/usr/local/opt/node@16/bin:$PATH&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc查看node版本，成功安装即可进行下一步. node -v2.Gitbook安装nodejs环境配置完成之后，即可通过npm工具下载安装gitbook npm install gitbook-cli -g安装完成之后，查看gitbook版本，即会安装gitbook工具 gitbook -Vwarning此时，可能会出现如下错误，主要是由于node版本较高导致的有两种解决方案 打开finder，通过路径找到polyfills.js文件，其中，可以看到287行代码处于statFix 方法中，其调用位置在62-64行，注释中阐述该方法主要是旧版本的修复逻辑，因此可以直接将调用位置注释掉，即可解决该问题. 通过降低nodejs版本，建议降至7.x以下，该方法也是网络上的主流方法，但是个人感觉有点削足适履.3.Gitbook部署初始化gitbook安装完成后，即可通过gitbook命令初始化gitbook目录 gitbook init其中README为项目文档，SUMMARY.md为目录文档，在SUMMARY中更新目录完成后，即可直接通过init命令创建该目录中的文件# Summary* [Introduction](README.md)* [前言](readme.md)* [第一章](part1/README.md) * [第一节](part1/1.md) * [第二节](part1/2.md) * [第三节](part1/3.md) * [第四节](part1/4.md)* [第二章](part2/README.md)* [第三章](part3/README.md)* [第四章](part4/README.md)上述目录创建完成后执行命令warning在gitbook初始化过程过程中，还会出现一个问题，该问题是由于nodejs版本过高导致的，发现了吗，其实由于gitbook公开版本久未更新的缘故，还是使用老版本的配套环境更加方便。构建初始化之后，可以通过以下命令来进行构建，构建完成后会生成_book目录，其中存储的即为默认生成的静态网页 gitbook build部署构建完成后，通过以下命令，即可启动gitbook服务 gitbook serve通过 http://localhost:4000 即可访问新建的gitbook电子书4.Gitbook插件book.json一般项目配置中都会有一个核心的配置文件，gitbook项目中即有一个book.json来管理整个gitbook项目，以下是我博客项目的配置文件{ &quot;author&quot;: &quot;irick&amp;lt;happyirick@gmail.com&amp;gt;&quot;, &quot;description&quot;: &quot;A GitBook Blog for irick&quot;, &quot;extension&quot;: null, &quot;generator&quot;: &quot;site&quot;, &quot;language&quot;:&quot;zh-hans&quot;, &quot;isbn&quot;: &quot;&quot;, &quot;links&quot;: { &quot;sharing&quot;: { &quot;all&quot;: null, &quot;facebook&quot;: null, &quot;google&quot;: null, &quot;twitter&quot;: null, &quot;weibo&quot;: null }, &quot;sidebar&quot;: { &quot;About me&quot;:&quot;https://github.com/HappyiRick&quot;, &quot;irick&#39;s Blog&quot;: &quot;https://happyirick.github.io/&quot; } }, &quot;output&quot;: null, &quot;pdf&quot;: { &quot;fontSize&quot;: 12, &quot;footerTemplate&quot;: null, &quot;headerTemplate&quot;: null, &quot;margin&quot;: { &quot;bottom&quot;: 36, &quot;left&quot;: 62, &quot;right&quot;: 62, &quot;top&quot;: 36 }, &quot;pageNumbers&quot;: false, &quot;paperSize&quot;: &quot;a4&quot; }, &quot;plugins&quot;: [ &quot;-sharing&quot;, &quot;-lunr&quot;, &quot;-search&quot;, &quot;-fontsettings&quot;, &quot;multipart&quot;, &quot;simple-page-toc&quot;, &quot;page-toc-button&quot;, &quot;github&quot;, &quot;advanced-emoji&quot;, &quot;search-pro&quot;, &quot;code&quot;, &quot;copy-code-button&quot;, &quot;chapter-fold&quot;, &quot;splitter&quot;, &quot;expandable-chapters&quot;, &quot;back-to-top-button&quot;, &quot;lightbox&quot;, &quot;toggle-chapters&quot;, &quot;anchors&quot;, &quot;baidu-tongji&quot;, &quot;tbfed-pagefooter&quot;, &quot;insert-logo&quot; ], &quot;pluginsConfig&quot;: { &quot;simple-page-toc&quot;: { &quot;maxDepth&quot;: 3, &quot;skipFirstH1&quot;: true }, &quot;page-toc-button&quot;: { &quot;maxTocDepth&quot;: 2, &quot;minTocSize&quot;: 2 }, &quot;github&quot;: { &quot;url&quot;: &quot;https://github.com/HappyiRick&quot; }, &quot;code&quot;: { &quot;copyButtons&quot;: true }, &quot;tbfed-pagefooter&quot;: { &quot;copyright&quot;:&quot;Copyright &amp;amp;copy happyirick 2022&quot;, &quot;modify_label&quot;: &quot;Post time:&quot;, &quot;modify_format&quot;: &quot;YYYY-MM-DD HH:mm:ss&quot; }, &quot;baidu-tongji&quot;: { &quot;token&quot;: &quot;5370d7bf584be5cfd91dd00fcb82ba67&quot; }, &quot;insert-logo&quot;:{ &quot;url&quot;:&quot;https://avatars.githubusercontent.com/u/16249555?s=400&amp;amp;u=45da22298bf8c55f726807d1ba94740343d14f20&amp;amp;v=4&quot;, &quot;style&quot;:&quot;background:none;min-height:196px;max-height:196px&quot; } }, &quot;title&quot;: &quot;irick&#39;s Blog&quot;, &quot;variables&quot;: {}}其中plugins 部分，则表示我们本项目的插件引用情况，追加插件名即可添加插件，通过在插件名前增加 - 号则可删去该插件，通过以下命令来进行安装 gitbook install总结gitbook是一款很方便的电子书生成浏览工具， 搭配一款合适的markdown写作工具即可实现高效的写作，非常感谢作者提供的这款工具" }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "重启", "tags": "getting started", "date": "2022-02-23 17:55:00 +0800", "snippet": "Start My Blog终于有了属于自己的Blog. 很久很久以前，就一直想着搭建一个记录自己成长的blog，后来一直庸庸碌碌，时间一天天流逝，自己却一事无成，静下心来想想，还是要从手头的事情开始，做好每一件小事。" } ]
